
stm32f7xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b5c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08000d54  08000d54  00010d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000dc0  08000dc0  00010dc8  2**0
                  CONTENTS
  4 .ARM          00000000  08000dc0  08000dc0  00010dc8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dc0  08000dc8  00010dc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dc0  08000dc0  00010dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dc4  08000dc4  00010dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010dc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000dc8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000dc8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00010dc8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001923  00000000  00000000  00010df6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004a9  00000000  00000000  00012719  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000150  00000000  00000000  00012bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000118  00000000  00000000  00012d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002158  00000000  00000000  00012e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001242  00000000  00000000  00014f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009651  00000000  00000000  000161ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001f81b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004c8  00000000  00000000  0001f898  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	08000d3c 	.word	0x08000d3c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	08000d3c 	.word	0x08000d3c

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <GPIO_PeriClockControl>:
 * @return					- None
 *
 * @note					- None
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	460b      	mov	r3, r1
 8000252:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000254:	78fb      	ldrb	r3, [r7, #3]
 8000256:	2b01      	cmp	r3, #1
 8000258:	d178      	bne.n	800034c <GPIO_PeriClockControl+0x104>

		if(pGPIOx == GPIOA){
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	4a7a      	ldr	r2, [pc, #488]	; (8000448 <GPIO_PeriClockControl+0x200>)
 800025e:	4293      	cmp	r3, r2
 8000260:	d106      	bne.n	8000270 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000262:	4b7a      	ldr	r3, [pc, #488]	; (800044c <GPIO_PeriClockControl+0x204>)
 8000264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000266:	4a79      	ldr	r2, [pc, #484]	; (800044c <GPIO_PeriClockControl+0x204>)
 8000268:	f043 0301 	orr.w	r3, r3, #1
 800026c:	6313      	str	r3, [r2, #48]	; 0x30
					GPIOK_PCLK_DI();
				}

	}

}
 800026e:	e0e5      	b.n	800043c <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOB){
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	4a77      	ldr	r2, [pc, #476]	; (8000450 <GPIO_PeriClockControl+0x208>)
 8000274:	4293      	cmp	r3, r2
 8000276:	d106      	bne.n	8000286 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000278:	4b74      	ldr	r3, [pc, #464]	; (800044c <GPIO_PeriClockControl+0x204>)
 800027a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027c:	4a73      	ldr	r2, [pc, #460]	; (800044c <GPIO_PeriClockControl+0x204>)
 800027e:	f043 0302 	orr.w	r3, r3, #2
 8000282:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000284:	e0da      	b.n	800043c <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOC){
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	4a72      	ldr	r2, [pc, #456]	; (8000454 <GPIO_PeriClockControl+0x20c>)
 800028a:	4293      	cmp	r3, r2
 800028c:	d106      	bne.n	800029c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800028e:	4b6f      	ldr	r3, [pc, #444]	; (800044c <GPIO_PeriClockControl+0x204>)
 8000290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000292:	4a6e      	ldr	r2, [pc, #440]	; (800044c <GPIO_PeriClockControl+0x204>)
 8000294:	f043 0304 	orr.w	r3, r3, #4
 8000298:	6313      	str	r3, [r2, #48]	; 0x30
}
 800029a:	e0cf      	b.n	800043c <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOD){
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	4a6e      	ldr	r2, [pc, #440]	; (8000458 <GPIO_PeriClockControl+0x210>)
 80002a0:	4293      	cmp	r3, r2
 80002a2:	d106      	bne.n	80002b2 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80002a4:	4b69      	ldr	r3, [pc, #420]	; (800044c <GPIO_PeriClockControl+0x204>)
 80002a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a8:	4a68      	ldr	r2, [pc, #416]	; (800044c <GPIO_PeriClockControl+0x204>)
 80002aa:	f043 0308 	orr.w	r3, r3, #8
 80002ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002b0:	e0c4      	b.n	800043c <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOE){
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4a69      	ldr	r2, [pc, #420]	; (800045c <GPIO_PeriClockControl+0x214>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d106      	bne.n	80002c8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80002ba:	4b64      	ldr	r3, [pc, #400]	; (800044c <GPIO_PeriClockControl+0x204>)
 80002bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002be:	4a63      	ldr	r2, [pc, #396]	; (800044c <GPIO_PeriClockControl+0x204>)
 80002c0:	f043 0310 	orr.w	r3, r3, #16
 80002c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002c6:	e0b9      	b.n	800043c <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOF){
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4a61      	ldr	r2, [pc, #388]	; (8000450 <GPIO_PeriClockControl+0x208>)
 80002cc:	4293      	cmp	r3, r2
 80002ce:	d106      	bne.n	80002de <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80002d0:	4b5e      	ldr	r3, [pc, #376]	; (800044c <GPIO_PeriClockControl+0x204>)
 80002d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d4:	4a5d      	ldr	r2, [pc, #372]	; (800044c <GPIO_PeriClockControl+0x204>)
 80002d6:	f043 0320 	orr.w	r3, r3, #32
 80002da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002dc:	e0ae      	b.n	800043c <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOG){
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4a5c      	ldr	r2, [pc, #368]	; (8000454 <GPIO_PeriClockControl+0x20c>)
 80002e2:	4293      	cmp	r3, r2
 80002e4:	d106      	bne.n	80002f4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80002e6:	4b59      	ldr	r3, [pc, #356]	; (800044c <GPIO_PeriClockControl+0x204>)
 80002e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ea:	4a58      	ldr	r2, [pc, #352]	; (800044c <GPIO_PeriClockControl+0x204>)
 80002ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f2:	e0a3      	b.n	800043c <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOH){
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4a5a      	ldr	r2, [pc, #360]	; (8000460 <GPIO_PeriClockControl+0x218>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d106      	bne.n	800030a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80002fc:	4b53      	ldr	r3, [pc, #332]	; (800044c <GPIO_PeriClockControl+0x204>)
 80002fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000300:	4a52      	ldr	r2, [pc, #328]	; (800044c <GPIO_PeriClockControl+0x204>)
 8000302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000306:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000308:	e098      	b.n	800043c <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOI){
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4a55      	ldr	r2, [pc, #340]	; (8000464 <GPIO_PeriClockControl+0x21c>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d106      	bne.n	8000320 <GPIO_PeriClockControl+0xd8>
			GPIOI_PCLK_EN();
 8000312:	4b4e      	ldr	r3, [pc, #312]	; (800044c <GPIO_PeriClockControl+0x204>)
 8000314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000316:	4a4d      	ldr	r2, [pc, #308]	; (800044c <GPIO_PeriClockControl+0x204>)
 8000318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800031c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800031e:	e08d      	b.n	800043c <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOJ){
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4a51      	ldr	r2, [pc, #324]	; (8000468 <GPIO_PeriClockControl+0x220>)
 8000324:	4293      	cmp	r3, r2
 8000326:	d106      	bne.n	8000336 <GPIO_PeriClockControl+0xee>
			GPIOJ_PCLK_EN();
 8000328:	4b48      	ldr	r3, [pc, #288]	; (800044c <GPIO_PeriClockControl+0x204>)
 800032a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032c:	4a47      	ldr	r2, [pc, #284]	; (800044c <GPIO_PeriClockControl+0x204>)
 800032e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000332:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000334:	e082      	b.n	800043c <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOK){
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4a4c      	ldr	r2, [pc, #304]	; (800046c <GPIO_PeriClockControl+0x224>)
 800033a:	4293      	cmp	r3, r2
 800033c:	d17e      	bne.n	800043c <GPIO_PeriClockControl+0x1f4>
			GPIOK_PCLK_EN();
 800033e:	4b43      	ldr	r3, [pc, #268]	; (800044c <GPIO_PeriClockControl+0x204>)
 8000340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000342:	4a42      	ldr	r2, [pc, #264]	; (800044c <GPIO_PeriClockControl+0x204>)
 8000344:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000348:	6313      	str	r3, [r2, #48]	; 0x30
}
 800034a:	e077      	b.n	800043c <GPIO_PeriClockControl+0x1f4>
		if(pGPIOx == GPIOA){
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a3e      	ldr	r2, [pc, #248]	; (8000448 <GPIO_PeriClockControl+0x200>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d106      	bne.n	8000362 <GPIO_PeriClockControl+0x11a>
					GPIOA_PCLK_DI();
 8000354:	4b3d      	ldr	r3, [pc, #244]	; (800044c <GPIO_PeriClockControl+0x204>)
 8000356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000358:	4a3c      	ldr	r2, [pc, #240]	; (800044c <GPIO_PeriClockControl+0x204>)
 800035a:	f023 0301 	bic.w	r3, r3, #1
 800035e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000360:	e06c      	b.n	800043c <GPIO_PeriClockControl+0x1f4>
				}else if(pGPIOx == GPIOB){
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a3a      	ldr	r2, [pc, #232]	; (8000450 <GPIO_PeriClockControl+0x208>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d106      	bne.n	8000378 <GPIO_PeriClockControl+0x130>
					GPIOB_PCLK_DI();
 800036a:	4b38      	ldr	r3, [pc, #224]	; (800044c <GPIO_PeriClockControl+0x204>)
 800036c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036e:	4a37      	ldr	r2, [pc, #220]	; (800044c <GPIO_PeriClockControl+0x204>)
 8000370:	f023 0302 	bic.w	r3, r3, #2
 8000374:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000376:	e061      	b.n	800043c <GPIO_PeriClockControl+0x1f4>
				}else if(pGPIOx == GPIOC){
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4a36      	ldr	r2, [pc, #216]	; (8000454 <GPIO_PeriClockControl+0x20c>)
 800037c:	4293      	cmp	r3, r2
 800037e:	d106      	bne.n	800038e <GPIO_PeriClockControl+0x146>
					GPIOC_PCLK_DI();
 8000380:	4b32      	ldr	r3, [pc, #200]	; (800044c <GPIO_PeriClockControl+0x204>)
 8000382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000384:	4a31      	ldr	r2, [pc, #196]	; (800044c <GPIO_PeriClockControl+0x204>)
 8000386:	f023 0304 	bic.w	r3, r3, #4
 800038a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038c:	e056      	b.n	800043c <GPIO_PeriClockControl+0x1f4>
				}else if(pGPIOx == GPIOD){
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a31      	ldr	r2, [pc, #196]	; (8000458 <GPIO_PeriClockControl+0x210>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d106      	bne.n	80003a4 <GPIO_PeriClockControl+0x15c>
					GPIOD_PCLK_DI();
 8000396:	4b2d      	ldr	r3, [pc, #180]	; (800044c <GPIO_PeriClockControl+0x204>)
 8000398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039a:	4a2c      	ldr	r2, [pc, #176]	; (800044c <GPIO_PeriClockControl+0x204>)
 800039c:	f023 0308 	bic.w	r3, r3, #8
 80003a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a2:	e04b      	b.n	800043c <GPIO_PeriClockControl+0x1f4>
				}else if(pGPIOx == GPIOE){
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a2d      	ldr	r2, [pc, #180]	; (800045c <GPIO_PeriClockControl+0x214>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d106      	bne.n	80003ba <GPIO_PeriClockControl+0x172>
					GPIOE_PCLK_DI();
 80003ac:	4b27      	ldr	r3, [pc, #156]	; (800044c <GPIO_PeriClockControl+0x204>)
 80003ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b0:	4a26      	ldr	r2, [pc, #152]	; (800044c <GPIO_PeriClockControl+0x204>)
 80003b2:	f023 0310 	bic.w	r3, r3, #16
 80003b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b8:	e040      	b.n	800043c <GPIO_PeriClockControl+0x1f4>
				}else if(pGPIOx == GPIOF){
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a24      	ldr	r2, [pc, #144]	; (8000450 <GPIO_PeriClockControl+0x208>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d106      	bne.n	80003d0 <GPIO_PeriClockControl+0x188>
					GPIOF_PCLK_DI();
 80003c2:	4b22      	ldr	r3, [pc, #136]	; (800044c <GPIO_PeriClockControl+0x204>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c6:	4a21      	ldr	r2, [pc, #132]	; (800044c <GPIO_PeriClockControl+0x204>)
 80003c8:	f023 0320 	bic.w	r3, r3, #32
 80003cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ce:	e035      	b.n	800043c <GPIO_PeriClockControl+0x1f4>
				}else if(pGPIOx == GPIOG){
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a20      	ldr	r2, [pc, #128]	; (8000454 <GPIO_PeriClockControl+0x20c>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d106      	bne.n	80003e6 <GPIO_PeriClockControl+0x19e>
					GPIOG_PCLK_DI();
 80003d8:	4b1c      	ldr	r3, [pc, #112]	; (800044c <GPIO_PeriClockControl+0x204>)
 80003da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003dc:	4a1b      	ldr	r2, [pc, #108]	; (800044c <GPIO_PeriClockControl+0x204>)
 80003de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e4:	e02a      	b.n	800043c <GPIO_PeriClockControl+0x1f4>
				}else if(pGPIOx == GPIOH){
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a1d      	ldr	r2, [pc, #116]	; (8000460 <GPIO_PeriClockControl+0x218>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d106      	bne.n	80003fc <GPIO_PeriClockControl+0x1b4>
					GPIOH_PCLK_DI();
 80003ee:	4b17      	ldr	r3, [pc, #92]	; (800044c <GPIO_PeriClockControl+0x204>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f2:	4a16      	ldr	r2, [pc, #88]	; (800044c <GPIO_PeriClockControl+0x204>)
 80003f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fa:	e01f      	b.n	800043c <GPIO_PeriClockControl+0x1f4>
				}else if(pGPIOx == GPIOI){
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a19      	ldr	r2, [pc, #100]	; (8000464 <GPIO_PeriClockControl+0x21c>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d106      	bne.n	8000412 <GPIO_PeriClockControl+0x1ca>
					GPIOI_PCLK_DI();
 8000404:	4b11      	ldr	r3, [pc, #68]	; (800044c <GPIO_PeriClockControl+0x204>)
 8000406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000408:	4a10      	ldr	r2, [pc, #64]	; (800044c <GPIO_PeriClockControl+0x204>)
 800040a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800040e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000410:	e014      	b.n	800043c <GPIO_PeriClockControl+0x1f4>
				}else if(pGPIOx == GPIOJ){
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a14      	ldr	r2, [pc, #80]	; (8000468 <GPIO_PeriClockControl+0x220>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d106      	bne.n	8000428 <GPIO_PeriClockControl+0x1e0>
					GPIOJ_PCLK_DI();
 800041a:	4b0c      	ldr	r3, [pc, #48]	; (800044c <GPIO_PeriClockControl+0x204>)
 800041c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041e:	4a0b      	ldr	r2, [pc, #44]	; (800044c <GPIO_PeriClockControl+0x204>)
 8000420:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000424:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000426:	e009      	b.n	800043c <GPIO_PeriClockControl+0x1f4>
				}else if(pGPIOx == GPIOK){
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a10      	ldr	r2, [pc, #64]	; (800046c <GPIO_PeriClockControl+0x224>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d105      	bne.n	800043c <GPIO_PeriClockControl+0x1f4>
					GPIOK_PCLK_DI();
 8000430:	4b06      	ldr	r3, [pc, #24]	; (800044c <GPIO_PeriClockControl+0x204>)
 8000432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000434:	4a05      	ldr	r2, [pc, #20]	; (800044c <GPIO_PeriClockControl+0x204>)
 8000436:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800043a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	40020000 	.word	0x40020000
 800044c:	40023800 	.word	0x40023800
 8000450:	40020400 	.word	0x40020400
 8000454:	40020800 	.word	0x40020800
 8000458:	40020c00 	.word	0x40020c00
 800045c:	40021000 	.word	0x40021000
 8000460:	40021c00 	.word	0x40021c00
 8000464:	40022000 	.word	0x40022000
 8000468:	40022400 	.word	0x40022400
 800046c:	40022800 	.word	0x40022800

08000470 <GPIO_Init>:
 * @return					- None
 *
 * @note					- None
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000470:	b580      	push	{r7, lr}
 8000472:	b086      	sub	sp, #24
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]

	// Enable the GPIO Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2101      	movs	r1, #1
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff fee0 	bl	8000248 <GPIO_PeriClockControl>

	// 1. Configure the Mode of the GPIO pin
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	795b      	ldrb	r3, [r3, #5]
 800048c:	2b03      	cmp	r3, #3
 800048e:	d81f      	bhi.n	80004d0 <GPIO_Init+0x60>
		// Non-Interrupt Mode

		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	795b      	ldrb	r3, [r3, #5]
 8000494:	461a      	mov	r2, r3
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	791b      	ldrb	r3, [r3, #4]
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	fa02 f303 	lsl.w	r3, r2, r3
 80004a0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx -> MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // setting
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	681a      	ldr	r2, [r3, #0]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	791b      	ldrb	r3, [r3, #4]
 80004ac:	4619      	mov	r1, r3
 80004ae:	2303      	movs	r3, #3
 80004b0:	408b      	lsls	r3, r1
 80004b2:	43db      	mvns	r3, r3
 80004b4:	4619      	mov	r1, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	400a      	ands	r2, r1
 80004bc:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx -> MODER |= temp;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	6819      	ldr	r1, [r3, #0]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	697a      	ldr	r2, [r7, #20]
 80004ca:	430a      	orrs	r2, r1
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	e0df      	b.n	8000690 <GPIO_Init+0x220>

	}else{
		// Interrupt Mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	795b      	ldrb	r3, [r3, #5]
 80004d4:	2b04      	cmp	r3, #4
 80004d6:	d117      	bne.n	8000508 <GPIO_Init+0x98>

			// 1. Configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004d8:	4b51      	ldr	r3, [pc, #324]	; (8000620 <GPIO_Init+0x1b0>)
 80004da:	68db      	ldr	r3, [r3, #12]
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	7912      	ldrb	r2, [r2, #4]
 80004e0:	4611      	mov	r1, r2
 80004e2:	2201      	movs	r2, #1
 80004e4:	408a      	lsls	r2, r1
 80004e6:	4611      	mov	r1, r2
 80004e8:	4a4d      	ldr	r2, [pc, #308]	; (8000620 <GPIO_Init+0x1b0>)
 80004ea:	430b      	orrs	r3, r1
 80004ec:	60d3      	str	r3, [r2, #12]

			// Clear corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ee:	4b4c      	ldr	r3, [pc, #304]	; (8000620 <GPIO_Init+0x1b0>)
 80004f0:	689b      	ldr	r3, [r3, #8]
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	7912      	ldrb	r2, [r2, #4]
 80004f6:	4611      	mov	r1, r2
 80004f8:	2201      	movs	r2, #1
 80004fa:	408a      	lsls	r2, r1
 80004fc:	43d2      	mvns	r2, r2
 80004fe:	4611      	mov	r1, r2
 8000500:	4a47      	ldr	r2, [pc, #284]	; (8000620 <GPIO_Init+0x1b0>)
 8000502:	400b      	ands	r3, r1
 8000504:	6093      	str	r3, [r2, #8]
 8000506:	e035      	b.n	8000574 <GPIO_Init+0x104>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	795b      	ldrb	r3, [r3, #5]
 800050c:	2b05      	cmp	r3, #5
 800050e:	d117      	bne.n	8000540 <GPIO_Init+0xd0>

			// 1. Configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000510:	4b43      	ldr	r3, [pc, #268]	; (8000620 <GPIO_Init+0x1b0>)
 8000512:	689b      	ldr	r3, [r3, #8]
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	7912      	ldrb	r2, [r2, #4]
 8000518:	4611      	mov	r1, r2
 800051a:	2201      	movs	r2, #1
 800051c:	408a      	lsls	r2, r1
 800051e:	4611      	mov	r1, r2
 8000520:	4a3f      	ldr	r2, [pc, #252]	; (8000620 <GPIO_Init+0x1b0>)
 8000522:	430b      	orrs	r3, r1
 8000524:	6093      	str	r3, [r2, #8]

			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000526:	4b3e      	ldr	r3, [pc, #248]	; (8000620 <GPIO_Init+0x1b0>)
 8000528:	68db      	ldr	r3, [r3, #12]
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	7912      	ldrb	r2, [r2, #4]
 800052e:	4611      	mov	r1, r2
 8000530:	2201      	movs	r2, #1
 8000532:	408a      	lsls	r2, r1
 8000534:	43d2      	mvns	r2, r2
 8000536:	4611      	mov	r1, r2
 8000538:	4a39      	ldr	r2, [pc, #228]	; (8000620 <GPIO_Init+0x1b0>)
 800053a:	400b      	ands	r3, r1
 800053c:	60d3      	str	r3, [r2, #12]
 800053e:	e019      	b.n	8000574 <GPIO_Init+0x104>


		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	795b      	ldrb	r3, [r3, #5]
 8000544:	2b06      	cmp	r3, #6
 8000546:	d115      	bne.n	8000574 <GPIO_Init+0x104>

			// 1. Configure FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000548:	4b35      	ldr	r3, [pc, #212]	; (8000620 <GPIO_Init+0x1b0>)
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	7912      	ldrb	r2, [r2, #4]
 8000550:	4611      	mov	r1, r2
 8000552:	2201      	movs	r2, #1
 8000554:	408a      	lsls	r2, r1
 8000556:	4611      	mov	r1, r2
 8000558:	4a31      	ldr	r2, [pc, #196]	; (8000620 <GPIO_Init+0x1b0>)
 800055a:	430b      	orrs	r3, r1
 800055c:	60d3      	str	r3, [r2, #12]

			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800055e:	4b30      	ldr	r3, [pc, #192]	; (8000620 <GPIO_Init+0x1b0>)
 8000560:	68db      	ldr	r3, [r3, #12]
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	7912      	ldrb	r2, [r2, #4]
 8000566:	4611      	mov	r1, r2
 8000568:	2201      	movs	r2, #1
 800056a:	408a      	lsls	r2, r1
 800056c:	4611      	mov	r1, r2
 800056e:	4a2c      	ldr	r2, [pc, #176]	; (8000620 <GPIO_Init+0x1b0>)
 8000570:	430b      	orrs	r3, r1
 8000572:	60d3      	str	r3, [r2, #12]


		}

		// 2. Configure GPIO port selection in SYSCFG_EXTIR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	791b      	ldrb	r3, [r3, #4]
 8000578:	089b      	lsrs	r3, r3, #2
 800057a:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	791b      	ldrb	r3, [r3, #4]
 8000580:	f003 0303 	and.w	r3, r3, #3
 8000584:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a26      	ldr	r2, [pc, #152]	; (8000624 <GPIO_Init+0x1b4>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d05b      	beq.n	8000648 <GPIO_Init+0x1d8>
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a24      	ldr	r2, [pc, #144]	; (8000628 <GPIO_Init+0x1b8>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d040      	beq.n	800061c <GPIO_Init+0x1ac>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a23      	ldr	r2, [pc, #140]	; (800062c <GPIO_Init+0x1bc>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d039      	beq.n	8000618 <GPIO_Init+0x1a8>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a21      	ldr	r2, [pc, #132]	; (8000630 <GPIO_Init+0x1c0>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d032      	beq.n	8000614 <GPIO_Init+0x1a4>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a20      	ldr	r2, [pc, #128]	; (8000634 <GPIO_Init+0x1c4>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d02b      	beq.n	8000610 <GPIO_Init+0x1a0>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a1a      	ldr	r2, [pc, #104]	; (8000628 <GPIO_Init+0x1b8>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d024      	beq.n	800060c <GPIO_Init+0x19c>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a19      	ldr	r2, [pc, #100]	; (800062c <GPIO_Init+0x1bc>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d01d      	beq.n	8000608 <GPIO_Init+0x198>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a19      	ldr	r2, [pc, #100]	; (8000638 <GPIO_Init+0x1c8>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d016      	beq.n	8000604 <GPIO_Init+0x194>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a18      	ldr	r2, [pc, #96]	; (800063c <GPIO_Init+0x1cc>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d00f      	beq.n	8000600 <GPIO_Init+0x190>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a16      	ldr	r2, [pc, #88]	; (8000640 <GPIO_Init+0x1d0>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d008      	beq.n	80005fc <GPIO_Init+0x18c>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a15      	ldr	r2, [pc, #84]	; (8000644 <GPIO_Init+0x1d4>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d101      	bne.n	80005f8 <GPIO_Init+0x188>
 80005f4:	230a      	movs	r3, #10
 80005f6:	e028      	b.n	800064a <GPIO_Init+0x1da>
 80005f8:	2300      	movs	r3, #0
 80005fa:	e026      	b.n	800064a <GPIO_Init+0x1da>
 80005fc:	2309      	movs	r3, #9
 80005fe:	e024      	b.n	800064a <GPIO_Init+0x1da>
 8000600:	2308      	movs	r3, #8
 8000602:	e022      	b.n	800064a <GPIO_Init+0x1da>
 8000604:	2307      	movs	r3, #7
 8000606:	e020      	b.n	800064a <GPIO_Init+0x1da>
 8000608:	2306      	movs	r3, #6
 800060a:	e01e      	b.n	800064a <GPIO_Init+0x1da>
 800060c:	2305      	movs	r3, #5
 800060e:	e01c      	b.n	800064a <GPIO_Init+0x1da>
 8000610:	2304      	movs	r3, #4
 8000612:	e01a      	b.n	800064a <GPIO_Init+0x1da>
 8000614:	2303      	movs	r3, #3
 8000616:	e018      	b.n	800064a <GPIO_Init+0x1da>
 8000618:	2302      	movs	r3, #2
 800061a:	e016      	b.n	800064a <GPIO_Init+0x1da>
 800061c:	2301      	movs	r3, #1
 800061e:	e014      	b.n	800064a <GPIO_Init+0x1da>
 8000620:	40013c00 	.word	0x40013c00
 8000624:	40020000 	.word	0x40020000
 8000628:	40020400 	.word	0x40020400
 800062c:	40020800 	.word	0x40020800
 8000630:	40020c00 	.word	0x40020c00
 8000634:	40021000 	.word	0x40021000
 8000638:	40021c00 	.word	0x40021c00
 800063c:	40022000 	.word	0x40022000
 8000640:	40022400 	.word	0x40022400
 8000644:	40022800 	.word	0x40022800
 8000648:	2300      	movs	r3, #0
 800064a:	747b      	strb	r3, [r7, #17]

		SYSCFG_PCLK_EN();
 800064c:	4b5f      	ldr	r3, [pc, #380]	; (80007cc <GPIO_Init+0x35c>)
 800064e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000650:	4a5e      	ldr	r2, [pc, #376]	; (80007cc <GPIO_Init+0x35c>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000656:	6453      	str	r3, [r2, #68]	; 0x44

		SYSCFG->EXTICR[temp1] |= portcode << (temp2*4);
 8000658:	4a5d      	ldr	r2, [pc, #372]	; (80007d0 <GPIO_Init+0x360>)
 800065a:	7cfb      	ldrb	r3, [r7, #19]
 800065c:	3302      	adds	r3, #2
 800065e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000662:	7c79      	ldrb	r1, [r7, #17]
 8000664:	7cbb      	ldrb	r3, [r7, #18]
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	fa01 f303 	lsl.w	r3, r1, r3
 800066c:	4618      	mov	r0, r3
 800066e:	4958      	ldr	r1, [pc, #352]	; (80007d0 <GPIO_Init+0x360>)
 8000670:	7cfb      	ldrb	r3, [r7, #19]
 8000672:	4302      	orrs	r2, r0
 8000674:	3302      	adds	r3, #2
 8000676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800067a:	4b56      	ldr	r3, [pc, #344]	; (80007d4 <GPIO_Init+0x364>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	7912      	ldrb	r2, [r2, #4]
 8000682:	4611      	mov	r1, r2
 8000684:	2201      	movs	r2, #1
 8000686:	408a      	lsls	r2, r1
 8000688:	4611      	mov	r1, r2
 800068a:	4a52      	ldr	r2, [pc, #328]	; (80007d4 <GPIO_Init+0x364>)
 800068c:	430b      	orrs	r3, r1
 800068e:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]

	// 2. Configure the Speed
	temp = pGPIOHandle-> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	799b      	ldrb	r3, [r3, #6]
 8000698:	461a      	mov	r2, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	791b      	ldrb	r3, [r3, #4]
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	fa02 f303 	lsl.w	r3, r2, r3
 80006a4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx -> OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	689a      	ldr	r2, [r3, #8]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	791b      	ldrb	r3, [r3, #4]
 80006b0:	4619      	mov	r1, r3
 80006b2:	2303      	movs	r3, #3
 80006b4:	408b      	lsls	r3, r1
 80006b6:	43db      	mvns	r3, r3
 80006b8:	4619      	mov	r1, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	400a      	ands	r2, r1
 80006c0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx -> OSPEEDR |= temp;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	6899      	ldr	r1, [r3, #8]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	697a      	ldr	r2, [r7, #20]
 80006ce:	430a      	orrs	r2, r1
 80006d0:	609a      	str	r2, [r3, #8]

	temp = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]

	// 3. Configure the PuPd settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	79db      	ldrb	r3, [r3, #7]
 80006da:	461a      	mov	r2, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	791b      	ldrb	r3, [r3, #4]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	fa02 f303 	lsl.w	r3, r2, r3
 80006e6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx -> PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	68da      	ldr	r2, [r3, #12]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	791b      	ldrb	r3, [r3, #4]
 80006f2:	4619      	mov	r1, r3
 80006f4:	2303      	movs	r3, #3
 80006f6:	408b      	lsls	r3, r1
 80006f8:	43db      	mvns	r3, r3
 80006fa:	4619      	mov	r1, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	400a      	ands	r2, r1
 8000702:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx -> PUPDR |= temp;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	68d9      	ldr	r1, [r3, #12]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	697a      	ldr	r2, [r7, #20]
 8000710:	430a      	orrs	r2, r1
 8000712:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

	// 4. Configure the OPType
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	7a1b      	ldrb	r3, [r3, #8]
 800071c:	461a      	mov	r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	791b      	ldrb	r3, [r3, #4]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx -> OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	685a      	ldr	r2, [r3, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	791b      	ldrb	r3, [r3, #4]
 8000732:	4619      	mov	r1, r3
 8000734:	2301      	movs	r3, #1
 8000736:	408b      	lsls	r3, r1
 8000738:	43db      	mvns	r3, r3
 800073a:	4619      	mov	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	400a      	ands	r2, r1
 8000742:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx -> OTYPER |= temp;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	6859      	ldr	r1, [r3, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	697a      	ldr	r2, [r7, #20]
 8000750:	430a      	orrs	r2, r1
 8000752:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]

	// 5. Configure the ALT Functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	795b      	ldrb	r3, [r3, #5]
 800075c:	2b02      	cmp	r3, #2
 800075e:	d130      	bne.n	80007c2 <GPIO_Init+0x352>

		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	791b      	ldrb	r3, [r3, #4]
 8000764:	08db      	lsrs	r3, r3, #3
 8000766:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	791b      	ldrb	r3, [r3, #4]
 800076c:	08db      	lsrs	r3, r3, #3
 800076e:	73fb      	strb	r3, [r7, #15]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << 4 * temp2);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	7c3a      	ldrb	r2, [r7, #16]
 8000776:	3208      	adds	r2, #8
 8000778:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	220f      	movs	r2, #15
 8000782:	fa02 f303 	lsl.w	r3, r2, r3
 8000786:	43db      	mvns	r3, r3
 8000788:	4618      	mov	r0, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	7c3a      	ldrb	r2, [r7, #16]
 8000790:	4001      	ands	r1, r0
 8000792:	3208      	adds	r2, #8
 8000794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << 4 * temp2;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	7c3a      	ldrb	r2, [r7, #16]
 800079e:	3208      	adds	r2, #8
 80007a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	7a5b      	ldrb	r3, [r3, #9]
 80007a8:	461a      	mov	r2, r3
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	fa02 f303 	lsl.w	r3, r2, r3
 80007b2:	4618      	mov	r0, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	7c3a      	ldrb	r2, [r7, #16]
 80007ba:	4301      	orrs	r1, r0
 80007bc:	3208      	adds	r2, #8
 80007be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80007c2:	bf00      	nop
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40013800 	.word	0x40013800
 80007d4:	40013c00 	.word	0x40013c00

080007d8 <GPIO_ReadFromInputPin>:
 * @return					- value of the input data (0 or 1)
 *
 * @note					- None
 *
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	70fb      	strb	r3, [r7, #3]

	uint8_t value;

	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	691a      	ldr	r2, [r3, #16]
 80007e8:	78fb      	ldrb	r3, [r7, #3]
 80007ea:	fa22 f303 	lsr.w	r3, r2, r3
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	f003 0301 	and.w	r3, r3, #1
 80007f4:	73fb      	strb	r3, [r7, #15]

	return value;
 80007f6:	7bfb      	ldrb	r3, [r7, #15]

}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <SPI_PeriClockControl>:
 * @return					- None
 *
 * @note					- None
 *
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000810:	78fb      	ldrb	r3, [r7, #3]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d141      	bne.n	800089a <SPI_PeriClockControl+0x96>

			if(pSPIx == SPI1){
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4a43      	ldr	r2, [pc, #268]	; (8000928 <SPI_PeriClockControl+0x124>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d106      	bne.n	800082c <SPI_PeriClockControl+0x28>
				SPI1_PCLK_EN();
 800081e:	4b43      	ldr	r3, [pc, #268]	; (800092c <SPI_PeriClockControl+0x128>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	4a42      	ldr	r2, [pc, #264]	; (800092c <SPI_PeriClockControl+0x128>)
 8000824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000828:	6453      	str	r3, [r2, #68]	; 0x44
				SPI6_PCLK_DI();
			}

		}

}
 800082a:	e077      	b.n	800091c <SPI_PeriClockControl+0x118>
			}else if(pSPIx == SPI2){
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4a40      	ldr	r2, [pc, #256]	; (8000930 <SPI_PeriClockControl+0x12c>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d106      	bne.n	8000842 <SPI_PeriClockControl+0x3e>
				SPI2_PCLK_EN();
 8000834:	4b3d      	ldr	r3, [pc, #244]	; (800092c <SPI_PeriClockControl+0x128>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	4a3c      	ldr	r2, [pc, #240]	; (800092c <SPI_PeriClockControl+0x128>)
 800083a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000840:	e06c      	b.n	800091c <SPI_PeriClockControl+0x118>
			}else if(pSPIx == SPI3){
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4a3b      	ldr	r2, [pc, #236]	; (8000934 <SPI_PeriClockControl+0x130>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d106      	bne.n	8000858 <SPI_PeriClockControl+0x54>
				SPI3_PCLK_EN();
 800084a:	4b38      	ldr	r3, [pc, #224]	; (800092c <SPI_PeriClockControl+0x128>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	4a37      	ldr	r2, [pc, #220]	; (800092c <SPI_PeriClockControl+0x128>)
 8000850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000854:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000856:	e061      	b.n	800091c <SPI_PeriClockControl+0x118>
			}else if(pSPIx == SPI4){
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a37      	ldr	r2, [pc, #220]	; (8000938 <SPI_PeriClockControl+0x134>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d106      	bne.n	800086e <SPI_PeriClockControl+0x6a>
				SPI4_PCLK_EN();
 8000860:	4b32      	ldr	r3, [pc, #200]	; (800092c <SPI_PeriClockControl+0x128>)
 8000862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000864:	4a31      	ldr	r2, [pc, #196]	; (800092c <SPI_PeriClockControl+0x128>)
 8000866:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800086a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800086c:	e056      	b.n	800091c <SPI_PeriClockControl+0x118>
			}else if(pSPIx == SPI5){
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4a32      	ldr	r2, [pc, #200]	; (800093c <SPI_PeriClockControl+0x138>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d106      	bne.n	8000884 <SPI_PeriClockControl+0x80>
				SPI5_PCLK_EN();
 8000876:	4b2d      	ldr	r3, [pc, #180]	; (800092c <SPI_PeriClockControl+0x128>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	4a2c      	ldr	r2, [pc, #176]	; (800092c <SPI_PeriClockControl+0x128>)
 800087c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000880:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000882:	e04b      	b.n	800091c <SPI_PeriClockControl+0x118>
			}else if(pSPIx == SPI6){
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a2e      	ldr	r2, [pc, #184]	; (8000940 <SPI_PeriClockControl+0x13c>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d147      	bne.n	800091c <SPI_PeriClockControl+0x118>
				SPI6_PCLK_EN();
 800088c:	4b27      	ldr	r3, [pc, #156]	; (800092c <SPI_PeriClockControl+0x128>)
 800088e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000890:	4a26      	ldr	r2, [pc, #152]	; (800092c <SPI_PeriClockControl+0x128>)
 8000892:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000896:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000898:	e040      	b.n	800091c <SPI_PeriClockControl+0x118>
			if(pSPIx == SPI1){
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4a22      	ldr	r2, [pc, #136]	; (8000928 <SPI_PeriClockControl+0x124>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d106      	bne.n	80008b0 <SPI_PeriClockControl+0xac>
				SPI1_PCLK_DI();
 80008a2:	4b22      	ldr	r3, [pc, #136]	; (800092c <SPI_PeriClockControl+0x128>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	4a21      	ldr	r2, [pc, #132]	; (800092c <SPI_PeriClockControl+0x128>)
 80008a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80008ac:	6453      	str	r3, [r2, #68]	; 0x44
}
 80008ae:	e035      	b.n	800091c <SPI_PeriClockControl+0x118>
			}else if(pSPIx == SPI2){
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a1f      	ldr	r2, [pc, #124]	; (8000930 <SPI_PeriClockControl+0x12c>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d106      	bne.n	80008c6 <SPI_PeriClockControl+0xc2>
				SPI2_PCLK_DI();
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <SPI_PeriClockControl+0x128>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008bc:	4a1b      	ldr	r2, [pc, #108]	; (800092c <SPI_PeriClockControl+0x128>)
 80008be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008c2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008c4:	e02a      	b.n	800091c <SPI_PeriClockControl+0x118>
			}else if(pSPIx == SPI3){
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a1a      	ldr	r2, [pc, #104]	; (8000934 <SPI_PeriClockControl+0x130>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d106      	bne.n	80008dc <SPI_PeriClockControl+0xd8>
				SPI3_PCLK_DI();
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <SPI_PeriClockControl+0x128>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	4a16      	ldr	r2, [pc, #88]	; (800092c <SPI_PeriClockControl+0x128>)
 80008d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008d8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008da:	e01f      	b.n	800091c <SPI_PeriClockControl+0x118>
			}else if(pSPIx == SPI4){
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a16      	ldr	r2, [pc, #88]	; (8000938 <SPI_PeriClockControl+0x134>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d106      	bne.n	80008f2 <SPI_PeriClockControl+0xee>
				SPI4_PCLK_DI();
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <SPI_PeriClockControl+0x128>)
 80008e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e8:	4a10      	ldr	r2, [pc, #64]	; (800092c <SPI_PeriClockControl+0x128>)
 80008ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008ee:	6453      	str	r3, [r2, #68]	; 0x44
}
 80008f0:	e014      	b.n	800091c <SPI_PeriClockControl+0x118>
			}else if(pSPIx == SPI5){
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4a11      	ldr	r2, [pc, #68]	; (800093c <SPI_PeriClockControl+0x138>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d106      	bne.n	8000908 <SPI_PeriClockControl+0x104>
				SPI5_PCLK_DI();
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <SPI_PeriClockControl+0x128>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	4a0b      	ldr	r2, [pc, #44]	; (800092c <SPI_PeriClockControl+0x128>)
 8000900:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000904:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000906:	e009      	b.n	800091c <SPI_PeriClockControl+0x118>
			}else if(pSPIx == SPI6){
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a0d      	ldr	r2, [pc, #52]	; (8000940 <SPI_PeriClockControl+0x13c>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d105      	bne.n	800091c <SPI_PeriClockControl+0x118>
				SPI6_PCLK_DI();
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <SPI_PeriClockControl+0x128>)
 8000912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000914:	4a05      	ldr	r2, [pc, #20]	; (800092c <SPI_PeriClockControl+0x128>)
 8000916:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800091a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	40013000 	.word	0x40013000
 800092c:	40023800 	.word	0x40023800
 8000930:	40003800 	.word	0x40003800
 8000934:	40003c00 	.word	0x40003c00
 8000938:	40013400 	.word	0x40013400
 800093c:	40015000 	.word	0x40015000
 8000940:	40015400 	.word	0x40015400

08000944 <SPI_Init>:
 * @return					- None
 *
 * @note					- None
 *
 */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]

	// Enable SPI Peripheral clock
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2101      	movs	r1, #1
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff56 	bl	8000804 <SPI_PeriClockControl>

	// Configure CR1 Register

	uint32_t tempreg = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]

	// 1. Configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	791b      	ldrb	r3, [r3, #4]
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	461a      	mov	r2, r3
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	4313      	orrs	r3, r2
 8000968:	60fb      	str	r3, [r7, #12]

	// 2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	795b      	ldrb	r3, [r3, #5]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d104      	bne.n	800097c <SPI_Init+0x38>
		//bidi mode cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	e014      	b.n	80009a6 <SPI_Init+0x62>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	795b      	ldrb	r3, [r3, #5]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d104      	bne.n	800098e <SPI_Init+0x4a>
		// bidi mode set
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	e00b      	b.n	80009a6 <SPI_Init+0x62>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	795b      	ldrb	r3, [r3, #5]
 8000992:	2b03      	cmp	r3, #3
 8000994:	d107      	bne.n	80009a6 <SPI_Init+0x62>
		// bidi mode cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800099c:	60fb      	str	r3, [r7, #12]
		// RXOnly bit set
		tempreg |= (1 << SPI_CR1_RXONLY);
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009a4:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure SPI serial clock speed (Baud Rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	799b      	ldrb	r3, [r3, #6]
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	461a      	mov	r2, r3
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]

	// 4. Configure DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_CRCL;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	79db      	ldrb	r3, [r3, #7]
 80009b8:	02db      	lsls	r3, r3, #11
 80009ba:	461a      	mov	r2, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	4313      	orrs	r3, r2
 80009c0:	60fb      	str	r3, [r7, #12]

	// 5. Configure CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	7a1b      	ldrb	r3, [r3, #8]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	461a      	mov	r2, r3
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	60fb      	str	r3, [r7, #12]

	// 6. Configure CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	7a5b      	ldrb	r3, [r3, #9]
 80009d4:	461a      	mov	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4313      	orrs	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	7a9b      	ldrb	r3, [r3, #10]
 80009e0:	025b      	lsls	r3, r3, #9
 80009e2:	461a      	mov	r2, r3
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	601a      	str	r2, [r3, #0]

}
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <SPI_GetFlagStatus>:
void SPI_DeInit(SPI_RegDef_t *pSPIx){

}


uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	6039      	str	r1, [r7, #0]

	if(pSPIx->SR & FlagName)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	689a      	ldr	r2, [r3, #8]
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000a10:	2301      	movs	r3, #1
 8000a12:	e000      	b.n	8000a16 <SPI_GetFlagStatus+0x1c>
	}

	return FLAG_RESET;
 8000a14:	2300      	movs	r3, #0

}
 8000a16:	4618      	mov	r0, r3
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <SPI_SendData>:
 * @return					- None
 *
 * @note					- This is a blocking call
 *
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b084      	sub	sp, #16
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	60f8      	str	r0, [r7, #12]
 8000a2a:	60b9      	str	r1, [r7, #8]
 8000a2c:	607a      	str	r2, [r7, #4]

	while(Len > 0){
 8000a2e:	e027      	b.n	8000a80 <SPI_SendData+0x5e>

		// 1. Wait till TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000a30:	bf00      	nop
 8000a32:	2102      	movs	r1, #2
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f7ff ffe0 	bl	80009fa <SPI_GetFlagStatus>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d0f8      	beq.n	8000a32 <SPI_SendData+0x10>

		//2. Check DFF
		if(pSPIx->CR1 & (1 << SPI_CR1_CRCL)){
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d00e      	beq.n	8000a6a <SPI_SendData+0x48>

			// 16bit DFF
			// 1. Load the data into DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	60da      	str	r2, [r3, #12]
			Len--;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	607b      	str	r3, [r7, #4]
			Len--;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	3301      	adds	r3, #1
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	e00a      	b.n	8000a80 <SPI_SendData+0x5e>

		}else{
			// 8bit DFF
			pSPIx->DR = *pTxBuffer;
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	60da      	str	r2, [r3, #12]
			Len--;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d1d4      	bne.n	8000a30 <SPI_SendData+0xe>

		}

	}
}
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <SPI_PeripheralControl>:
 * @return					- None
 *
 * @note					- None
 *
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	460b      	mov	r3, r1
 8000a98:	70fb      	strb	r3, [r7, #3]

	if(EnOrDi == ENABLE){
 8000a9a:	78fb      	ldrb	r3, [r7, #3]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d106      	bne.n	8000aae <SPI_PeripheralControl+0x20>

		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	601a      	str	r2, [r3, #0]

		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);

	}

}
 8000aac:	e005      	b.n	8000aba <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	601a      	str	r2, [r3, #0]
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <SPI_SSOEConfig>:
 * @return					- None
 *
 * @note					- None
 *
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	70fb      	strb	r3, [r7, #3]

	if(EnOrDi == ENABLE){
 8000ad2:	78fb      	ldrb	r3, [r7, #3]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d106      	bne.n	8000ae6 <SPI_SSOEConfig+0x20>

		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f043 0204 	orr.w	r2, r3, #4
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	605a      	str	r2, [r3, #4]

		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);

	}

}
 8000ae4:	e005      	b.n	8000af2 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f023 0204 	bic.w	r2, r3, #4
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	605a      	str	r2, [r3, #4]
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <delay>:

#include "string.h"
#include "stm32f767xx.h"


void delay(void){
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000/2; i++ );
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	e002      	b.n	8000b12 <delay+0x12>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <delay+0x28>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d9f8      	bls.n	8000b0c <delay+0xc>
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	0003d08f 	.word	0x0003d08f

08000b2c <SPI2_GPIOInits>:
 *
 * @note					- None
 *
 */

void SPI2_GPIOInits(void){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0


	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <SPI2_GPIOInits+0x4c>)
 8000b34:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000b36:	2302      	movs	r3, #2
 8000b38:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000b3a:	2305      	movs	r3, #5
 8000b3c:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000b42:	2301      	movs	r3, #1
 8000b44:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000b46:	2302      	movs	r3, #2
 8000b48:	72bb      	strb	r3, [r7, #10]

	// NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000b4a:	230c      	movs	r3, #12
 8000b4c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fc8d 	bl	8000470 <GPIO_Init>

	// SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000b56:	230d      	movs	r3, #13
 8000b58:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fc87 	bl	8000470 <GPIO_Init>
	// MISO
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
	//GPIO_Init(&SPIPins);

	// MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000b62:	230f      	movs	r3, #15
 8000b64:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fc81 	bl	8000470 <GPIO_Init>
}
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40020400 	.word	0x40020400

08000b7c <SPI2_Inits>:



void SPI2_Inits(void){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <SPI2_Inits+0x38>)
 8000b84:	607b      	str	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000b86:	2301      	movs	r3, #1
 8000b88:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	72bb      	strb	r3, [r7, #10]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000b92:	2300      	movs	r3, #0
 8000b94:	72fb      	strb	r3, [r7, #11]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	733b      	strb	r3, [r7, #12]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	737b      	strb	r3, [r7, #13]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_DI; // Hardware slave management
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2Handle);
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fecd 	bl	8000944 <SPI_Init>

}
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40003800 	.word	0x40003800

08000bb8 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioBtn;

	// Initialising Button
	GpioBtn.pGPIOx = GPIOC;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <GPIO_ButtonInit+0x34>)
 8000bc0:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000bc2:	230d      	movs	r3, #13
 8000bc4:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	72fb      	strb	r3, [r7, #11]
	GPIO_PeriClockControl(GPIOC, ENABLE);
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	4805      	ldr	r0, [pc, #20]	; (8000bec <GPIO_ButtonInit+0x34>)
 8000bd6:	f7ff fb37 	bl	8000248 <GPIO_PeriClockControl>
	GPIO_Init(&GpioBtn);
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fc47 	bl	8000470 <GPIO_Init>

}
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40020800 	.word	0x40020800

08000bf0 <main>:


int main(void){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b09c      	sub	sp, #112	; 0x70
 8000bf4:	af00      	add	r7, sp, #0


	char user_data[] = "Hi, this is a test for sending string data from STM32 MCU to Arduino UNO via SPI Communication interface";
 8000bf6:	4a21      	ldr	r2, [pc, #132]	; (8000c7c <main+0x8c>)
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	2269      	movs	r2, #105	; 0x69
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f890 	bl	8000d24 <memcpy>

	GPIO_ButtonInit();
 8000c04:	f7ff ffd8 	bl	8000bb8 <GPIO_ButtonInit>

	SPI2_GPIOInits();
 8000c08:	f7ff ff90 	bl	8000b2c <SPI2_GPIOInits>

	SPI2_Inits();
 8000c0c:	f7ff ffb6 	bl	8000b7c <SPI2_Inits>

	SPI_SSOEConfig(SPI2, ENABLE);
 8000c10:	2101      	movs	r1, #1
 8000c12:	481b      	ldr	r0, [pc, #108]	; (8000c80 <main+0x90>)
 8000c14:	f7ff ff57 	bl	8000ac6 <SPI_SSOEConfig>

	while(1){

		while(!GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13));
 8000c18:	bf00      	nop
 8000c1a:	210d      	movs	r1, #13
 8000c1c:	4819      	ldr	r0, [pc, #100]	; (8000c84 <main+0x94>)
 8000c1e:	f7ff fddb 	bl	80007d8 <GPIO_ReadFromInputPin>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d0f8      	beq.n	8000c1a <main+0x2a>
		delay();
 8000c28:	f7ff ff6a 	bl	8000b00 <delay>

		// Enable SPI2 Peripheral
		SPI_PeripheralControl(SPI2, ENABLE);
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	4814      	ldr	r0, [pc, #80]	; (8000c80 <main+0x90>)
 8000c30:	f7ff ff2d 	bl	8000a8e <SPI_PeripheralControl>

		// Send Length information
		uint8_t dataLen = strlen(user_data);
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fafe 	bl	8000238 <strlen>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	70fb      	strb	r3, [r7, #3]
		SPI_SendData(SPI2, &dataLen, 1);
 8000c42:	1cfb      	adds	r3, r7, #3
 8000c44:	2201      	movs	r2, #1
 8000c46:	4619      	mov	r1, r3
 8000c48:	480d      	ldr	r0, [pc, #52]	; (8000c80 <main+0x90>)
 8000c4a:	f7ff feea 	bl	8000a22 <SPI_SendData>

		// Send data
		SPI_SendData(SPI2, (uint8_t*)user_data, strlen(user_data));
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff faf1 	bl	8000238 <strlen>
 8000c56:	4602      	mov	r2, r0
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4808      	ldr	r0, [pc, #32]	; (8000c80 <main+0x90>)
 8000c5e:	f7ff fee0 	bl	8000a22 <SPI_SendData>

		// Conforming SPI is not busy
		while(SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG));
 8000c62:	bf00      	nop
 8000c64:	2180      	movs	r1, #128	; 0x80
 8000c66:	4806      	ldr	r0, [pc, #24]	; (8000c80 <main+0x90>)
 8000c68:	f7ff fec7 	bl	80009fa <SPI_GetFlagStatus>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d1f8      	bne.n	8000c64 <main+0x74>

		// Closing the communication
		SPI_PeripheralControl(SPI2, DISABLE);
 8000c72:	2100      	movs	r1, #0
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <main+0x90>)
 8000c76:	f7ff ff0a 	bl	8000a8e <SPI_PeripheralControl>
	while(1){
 8000c7a:	e7cd      	b.n	8000c18 <main+0x28>
 8000c7c:	08000d54 	.word	0x08000d54
 8000c80:	40003800 	.word	0x40003800
 8000c84:	40020800 	.word	0x40020800

08000c88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c88:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c8a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c8c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c92:	490d      	ldr	r1, [pc, #52]	; (8000cc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c94:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <LoopForever+0xe>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca8:	4c0a      	ldr	r4, [pc, #40]	; (8000cd4 <LoopForever+0x16>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cb6:	f000 f811 	bl	8000cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cba:	f7ff ff99 	bl	8000bf0 <main>

08000cbe <LoopForever>:

LoopForever:
    b LoopForever
 8000cbe:	e7fe      	b.n	8000cbe <LoopForever>
  ldr   r0, =_estack
 8000cc0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000ccc:	08000dc8 	.word	0x08000dc8
  ldr r2, =_sbss
 8000cd0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000cd4:	2000001c 	.word	0x2000001c

08000cd8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC_IRQHandler>
	...

08000cdc <__libc_init_array>:
 8000cdc:	b570      	push	{r4, r5, r6, lr}
 8000cde:	4e0d      	ldr	r6, [pc, #52]	; (8000d14 <__libc_init_array+0x38>)
 8000ce0:	4c0d      	ldr	r4, [pc, #52]	; (8000d18 <__libc_init_array+0x3c>)
 8000ce2:	1ba4      	subs	r4, r4, r6
 8000ce4:	10a4      	asrs	r4, r4, #2
 8000ce6:	2500      	movs	r5, #0
 8000ce8:	42a5      	cmp	r5, r4
 8000cea:	d109      	bne.n	8000d00 <__libc_init_array+0x24>
 8000cec:	4e0b      	ldr	r6, [pc, #44]	; (8000d1c <__libc_init_array+0x40>)
 8000cee:	4c0c      	ldr	r4, [pc, #48]	; (8000d20 <__libc_init_array+0x44>)
 8000cf0:	f000 f824 	bl	8000d3c <_init>
 8000cf4:	1ba4      	subs	r4, r4, r6
 8000cf6:	10a4      	asrs	r4, r4, #2
 8000cf8:	2500      	movs	r5, #0
 8000cfa:	42a5      	cmp	r5, r4
 8000cfc:	d105      	bne.n	8000d0a <__libc_init_array+0x2e>
 8000cfe:	bd70      	pop	{r4, r5, r6, pc}
 8000d00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d04:	4798      	blx	r3
 8000d06:	3501      	adds	r5, #1
 8000d08:	e7ee      	b.n	8000ce8 <__libc_init_array+0xc>
 8000d0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d0e:	4798      	blx	r3
 8000d10:	3501      	adds	r5, #1
 8000d12:	e7f2      	b.n	8000cfa <__libc_init_array+0x1e>
 8000d14:	08000dc0 	.word	0x08000dc0
 8000d18:	08000dc0 	.word	0x08000dc0
 8000d1c:	08000dc0 	.word	0x08000dc0
 8000d20:	08000dc4 	.word	0x08000dc4

08000d24 <memcpy>:
 8000d24:	b510      	push	{r4, lr}
 8000d26:	1e43      	subs	r3, r0, #1
 8000d28:	440a      	add	r2, r1
 8000d2a:	4291      	cmp	r1, r2
 8000d2c:	d100      	bne.n	8000d30 <memcpy+0xc>
 8000d2e:	bd10      	pop	{r4, pc}
 8000d30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000d34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000d38:	e7f7      	b.n	8000d2a <memcpy+0x6>
	...

08000d3c <_init>:
 8000d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d3e:	bf00      	nop
 8000d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d42:	bc08      	pop	{r3}
 8000d44:	469e      	mov	lr, r3
 8000d46:	4770      	bx	lr

08000d48 <_fini>:
 8000d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d4a:	bf00      	nop
 8000d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d4e:	bc08      	pop	{r3}
 8000d50:	469e      	mov	lr, r3
 8000d52:	4770      	bx	lr
